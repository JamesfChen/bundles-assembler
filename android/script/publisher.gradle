/**
 * [Android库发布到Maven Central全攻略](https://xiaozhuanlan.com/topic/6174835029)
 * [发布android库AAR至mavenCentral看这篇文章就可以了](https://zhuanlan.zhihu.com/p/22351830)
 * [nexus repo](https://s01.oss.sonatype.org/#stagingRepositories)
 * [sonatype](https://issues.sonatype.org/secure/Dashboard.jspa)
 * [手动搭建maven](https://blog.csdn.net/intbird/article/details/105969242)
 * [maven centeral 文件查询](https://search.maven.org/)
 *
 *
 *
 *  // 发布jar 或者 aar 文件 到maven central
 * ./gradlew publishJarPublicationToMavenCentralRepository
 * ./gradlew publishAarPublicationToMavenCentralRepository
 *  // 发布jar 或者 aar 文件 到maven local
 * ./gradlew publishXxxPublicationToMavenLocal
 */
apply plugin: 'maven-publish'
apply plugin: 'signing'
extensions.create('publish', PublishExtension)
//java {
//    withJavadocJar()
//    withSourcesJar()
//}
afterEvaluate {
    def ext = project['publish'] as PublishExtension
    project.group = ext.groupId
    project.version = ext.version
    loadUserInfo(project, ext)
//    configMavenLocal(project, ext)
    configMaven(project, ext)
//    publishJarPublicationToMavenCentralRepository.dependsOn assembleRelease
//    publishAarPublicationToMavenCentralRepository.dependsOn assembleRelease
//    publishJarPublicationToMavenLocal.dependsOn assembleRelease
//    publishAarPublicationToMavenLocal.dependsOn assembleRelease

}

private void loadUserInfo(Project project, PublishExtension ext) {
    Properties properties = new Properties()
    File localPropertiesFile = project.rootProject.file("local.properties");
    if (localPropertiesFile.exists()) {
        properties.load(localPropertiesFile.newDataInputStream())
        project.ext["signing.keyId"] = properties.getProperty("signing.keyId")
        project.ext["signing.password"] = properties.getProperty("signing.password")
        project.ext["signing.secretKeyRingFile"] = properties.getProperty("signing.secretKeyRingFile")
        ext.ossrhUsername = properties.getProperty("ossrhUsername")
        ext.ossrhPassword = properties.getProperty("ossrhPassword")
    }
}

//def configMavenLocal(Project project, PublishExtension ext) {
//    project.install {
//        repositories.mavenInstaller {
//            configPom(pom, ext)
//        }
//    }

//    project.tasks.create("mavenLocal", Upload) {
//        group("publishing")
//        configuration = project.configurations.archives
//
//        repositories.mavenDeployer {
//            repository(url: uri("${project.rootDir.path}/mavenLocal"))
//            configPom(pom, ext)
//        }
//
//        doFirst {
//            ext.check(false)
//        }
//    }

//    project.tasks.findByName("publishJarPublicationToMavenCentralRepository").doFirst {
//        ext.check(true)
//    }
//}
//配置maven local 和 maven central两个仓库
def configMaven(Project project, PublishExtension ext) {


    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    project.components.each { components ->
        if (components.name == 'release' || components.name == 'java') {
            def taskName
            def pkg
            if (isAndroid()) {
                taskName = 'aar'
                pkg = "$buildDir/outputs/aar/${ext.artifactId}-release.aar"
            } else {
                taskName = 'jar'
                pkg = "$buildDir/libs/${ext.artifactId}-${ext.version}.jar"
            }
            publishing.publications { publications ->
                publications.create(taskName, MavenPublication, { MavenPublication publication ->
                    publication.from(components)
                    publication.groupId = ext.groupId
                    publication.artifactId = ext.artifactId
                    publication.version = ext.version
                    configJavadoc(project, publication,ext)
                    configPom(publication.pom, ext)
                })
            }
        }
    }
    //远程仓库
    publishing.repositories { artifactRepositories ->
        artifactRepositories.maven { mavenArtifactRepository ->
            mavenArtifactRepository.name = "mavenCentral"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            mavenArtifactRepository.url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            mavenArtifactRepository.credentials {
                username = ext.ossrhUsername
                password = ext.ossrhPassword
            }
        }

    }
    ext.check(true)
    SigningExtension signing = project.extensions.getByType(SigningExtension)
//    signing.useInMemoryPgpKeys(ext.signingKeyId, ext.signingSecretKeyRingFile,ext.signingPassword)
    signing.sign(publishing.publications)

}

def configPom(org.gradle.api.publish.maven.MavenPom pom, PublishExtension ext) {
    pom.name = ext.name
    pom.packaging = isAndroid() ? "aar" : "jar"
    pom.description = ext.name
    pom.url = ext.website
    pom.scm {
        url = ext.website
        connection = ext.website
        developerConnection = ext.website + ".git"
    }
    pom.licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    pom.developers {
        developer {
            id = ext.ossrhUsername
            name = ext.ossrhUsername
        }
    }
    // A slightly hacky fix so that your POM will include any transitive dependencies
    // that your library builds upon
//    pom.withXml {
//        def dependenciesNode = asNode().appendNode('dependencies')
//
////        project.configurations.implementation.allDependencies.findAll { dep -> dep.version != "unspecified" }.collect {dependency->
////            def dependencyNode = dependenciesNode.appendNode('dependency')
////            dependencyNode.appendNode('groupId', it.group)
////            dependencyNode.appendNode('artifactId', it.name)
////            dependencyNode.appendNode('version', it.version)
////        }
//        project.configurations.implementation.allDependencies.findAll { dep -> dep.version != "unspecified" }.collect {dependency->
//            def dependencyNode = dependenciesNode.appendNode('dependency')
//            dependencyNode.appendNode('groupId', it.group)
//            dependencyNode.appendNode('artifactId', it.name)
//            dependencyNode.appendNode('version', it.version)
//        }
//    }
}

private void configJavadoc(Project project,MavenPublication publication, PublishExtension ext) {
    if (isAndroid()) {
        // This generates sources.jar
        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += configurations.compile
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    } else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    if (project.hasProperty("kotlin")) {
        // Disable creating javadocs
        project.tasks.withType(Javadoc) {
            enabled = false
        }
    }

    javadoc {
        options {
            encoding "UTF-8"
            charSet 'UTF-8'
            author true
            version ext.version
            links "http://docs.oracle.com/javase/7/docs/api"
            title "${ext.name} ${ext.version}"
        }
    }
    publication.artifact(sourcesJar)
    publication.artifact(javadocJar)
//    publication.setArtifacts([sourcesJar])
//    artifacts {
//        archives javadocJar
//        archives sourcesJar
//    }
}

def isAndroid() {
    return project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')
}

class PublishExtension {
    String name
    String groupId
    String artifactId
    String version
    String website

    String ossrhUsername
    String ossrhPassword

    void check(boolean isMavenCentral) {
        checkField(name, "name")
        checkField(groupId, "groupId")
        checkField(artifactId, "artifactId")
        checkField(version, "version")
        checkField(website, "website")

        if (isMavenCentral) {
            if (isMavenCentralEmpty()) {
                throw new NullPointerException("U should set signingKeyId/signingPassword/signingSecretKeyRingFile in local.properties")
            }
        }
    }

    boolean isMavenCentralEmpty() {
        return isEmpty(ossrhUsername) || isEmpty(ossrhPassword)
    }

    static void checkField(String field, String fieldName) {
        if (isEmpty(field)) {
            throw new NullPointerException("$fieldName is empty!!")
        }
    }

    static boolean isEmpty(String str) {
        return str == null || str.length() == 0
    }
}