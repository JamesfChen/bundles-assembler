// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.kotlin_version = "1.4.21"
    repositories {
        maven { url "https://jitpack.io" }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url uri("$rootDir/repo") }
//        google()
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.alibaba:arouter-register:1.0.2"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'com.google.firebase:perf-plugin:1.4.0'
    }
}

allprojects {
    repositories {
        maven { url "https://jitpack.io" }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url uri("$rootDir/repo") }
//        google()
        mavenLocal()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
ext {
    findProject = { moduleName ->
        if (gradle.ext.binaryModuleMap.containsKey(moduleName)) {
            def module = gradle.ext.binaryModuleMap[moduleName]
            if (module.binary_artifact.isEmpty()) {
                throw new IllegalArgumentException("binary module 的binary_artifact不能为空")
            }
            return module.binary_artifact
        } else if (gradle.ext.sourceModuleMap.containsKey(moduleName)) {
            return gradle.rootProject.findProject(moduleName)
        }
        //该模块为exclude，不会进行编译不需要依赖
        return null
    }
    findDepProjects = { moduleName ->
        def module = null
        if (gradle.ext.sourceModuleMap.containsKey(moduleName)) {
            module = gradle.ext.sourceModuleMap[moduleName]
            if (module.deps == null) return []
        } else if (gradle.ext.binaryModuleMap.containsKey(moduleName)) {
            module = gradle.ext.binaryModuleMap[moduleName]
            if (module.deps == null) return []
        }
        d = []
        if (module != null) {
            module.deps.each { dep ->
                def m =findProject(dep)
                if (m !=null){
                    d.add(m)
                }
            }
        }
        return d

    }
    findModule = { moduleName ->
        if (gradle.ext.binaryModuleMap.containsKey(moduleName)) {
            return gradle.ext.binaryModuleMap[moduleName]
        } else if (gradle.ext.sourceModuleMap.containsKey(moduleName)) {
            return gradle.ext.sourceModuleMap[moduleName]
        }
        return null
    }
    modules = gradle.ext.sourceModuleMap.values() + gradle.ext.binaryModuleMap.values()
}
static def isWindows() {
    return System.properties['os.name'].contains('Windows');
}

task publishAll {
    doLast {
        gradle.ext.sourceModuleMap.each {canonicalName,module->
            if (canonicalName !=':app' && canonicalName !=':hotel-module:hotel-lint' && module.format !='app') {
                exec {
                    executable rootDir.path+File.separator + (isWindows() ? 'gradlew.bat' :'gradlew')
                    workingDir rootDir
                    def argv = []
                    argv << "${canonicalName}:publishToMavenLocal"
                    args = argv
                }
            }
        }
    }
}
task bundle{}
task foundation{}
