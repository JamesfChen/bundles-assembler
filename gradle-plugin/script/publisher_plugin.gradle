apply plugin: 'maven-publish'
apply plugin: 'signing'

extensions.create('publish', PublishExtension)

def isAndroid() {
    return project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')
}

private void loadUserInfo(Project project, PublishExtension ext) {
    Properties properties = new Properties()
    File localPropertiesFile = project.rootProject.file("local.properties");
    if (localPropertiesFile.exists()) {
        properties.load(localPropertiesFile.newDataInputStream())
        project.ext["signing.keyId"] = properties.getProperty("signing.keyId")
        project.ext["signing.password"] = properties.getProperty("signing.password")
        project.ext["signing.secretKeyRingFile"] = properties.getProperty("signing.secretKeyRingFile")
        ext.ossrhUsername = properties.getProperty("ossrhUsername")
        ext.ossrhPassword = properties.getProperty("ossrhPassword")
    }
}

afterEvaluate {
    def ext = project['publish'] as PublishExtension
    loadUserInfo(project, ext)
    publishing {
        publications { publications ->
            publications.each { MavenPublication publication ->
                println("cjf ${publication.groupId}:${publication.artifactId}:${publication.version} before")
//                publication.groupId = ext.groupId
//                publication.artifactId = ext.artifactId
//                publication.version = ext.version
                configPom(publication.pom, ext)
                println("cjf ${publication.groupId}:${publication.artifactId}:${publication.version} after")
            }
        }
        repositories {
            maven {
                name = 'myProject'
                url = "${rootDir}/local-repo"
            }
            //./gradlew publishAllPublicationsToMavenCentralRepository
//            maven {
//                name = "mavenCentral"
//                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
//                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//                credentials {
//                    username = ext.ossrhUsername
//                    password = ext.ossrhPassword
//                }
//            }
        }
    }
    project.tasks.findByName("publishAllPublicationsToMavenCentralRepository").doFirst {
        ext.check(true)
    }
//    signing {
//        sign publishing.publications
//    }
}

def configPom(org.gradle.api.publish.maven.MavenPom pom, PublishExtension ext) {
    pom.name = ext.name
    pom.packaging = isAndroid() ? "aar" : "jar"
    pom.description = ext.name
    pom.url = ext.website
    pom.scm {
        url = ext.website
        connection = ext.website
        developerConnection = ext.website + ".git"
    }
    pom.licenses {
        license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    pom.developers {
        developer {
            id = ext.ossrhUsername
            name = ext.ossrhUsername
        }
    }
}


class PublishExtension {
    String name
    String groupId
    String artifactId
    String version
    String website

    String ossrhUsername
    String ossrhPassword

    void check(boolean isMavenCentral) {
        checkField(name, "name")
        checkField(groupId, "groupId")
        checkField(artifactId, "artifactId")
        checkField(version, "version")
        checkField(website, "website")

        if (isMavenCentral) {
            if (isMavenCentralEmpty()) {
                throw new NullPointerException("U should set signingKeyId/signingPassword/signingSecretKeyRingFile in local.properties")
            }
        }
    }

    boolean isMavenCentralEmpty() {
        return isEmpty(ossrhUsername) || isEmpty(ossrhPassword)
    }

    static void checkField(String field, String fieldName) {
        if (isEmpty(field)) {
            throw new NullPointerException("$fieldName is empty!!")
        }
    }

    static boolean isEmpty(String str) {
        return str == null || str.length() == 0
    }
}