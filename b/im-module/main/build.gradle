plugins {
    id "io.github.jamesfchen.app-plugin"
    id 'io.github.jamesfchen.replugin-parasite-plugin'
}
apply from: "${rootDir.path}/script/ui_compose.gradle"
repluginPluginConfig {
    pluginName = "im"
    hostApplicationId = rootProject.applicationId
    hostAppLauncherActivity = "com.jamesfchen.myhome.SplashActivity"
}
apply from:"$rootDir/script/app_config.gradle"
android {
    buildFeatures {
        compose true
    }
    defaultConfig {
        resValue "string", "app_name","im.app"
    }
}
dependencies {
    project.depsConfig("implementation", "im-chatroom")
    implementation "io.github.jamesfchen:replugin-parasite-api:${RP_VERSION}"
    def androidJar = findAndroidJarPath(project, project.android.defaultConfig.targetSdkVersion.getApiLevel())
    project.dependencies.add("compileOnly", androidJar)
}
static ConfigurableFileCollection findAndroidJarPath(project, int sdkVersion) {
//        return ScopeCompat.getAndroidJar(globalScope)
    return project.files("${findSdkLocation(project)}/platforms/android-$sdkVersion/android.jar")
}


static File findSdkLocation(Project project){
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        def properties = new Properties()
        new FileInputStream(localProperties).withCloseable { instr ->
            properties.load(instr)
        }
        def sdkDirProp = properties.getProperty("sdk.dir")
        if (sdkDirProp != null) {
            return new File(sdkDirProp)
        } else {
            sdkDirProp = properties.getProperty("android.dir")
            if (sdkDirProp != null) {
                return new File(rootDir, sdkDirProp)
            } else {
                throw new RuntimeException("No sdk.dir property defined in local.properties file.")
            }
        }
    } else {
        def envVar = System.getenv("ANDROID_HOME")
        if (envVar != null) {
            return new File(envVar)
        } else {
            def property = System.getProperty("android.home")
            if (property != null) {
                return new File(property)
            }
        }
    }
    throw  new RuntimeException("Can't find SDK path")
}